/*global $*/

const phantom = require("/home/ubuntu/.nvm/versions/node/v4.5.0/lib/node_modules/phantom");
var phantomPromise = new Promise(resolve => {
    resolve(phantom.create(['--cookies-file=/home/ubuntu/workspace/Data/cookies']));
});
var page;
var queue;
var pageState;

var questNameToNumber = {}
questNameToNumber["The Resources"] = 4;
questNameToNumber["First Steps"] = 3;

function openPage () {
    return new Promise((resolve, reject) => {
        phantomPromise
            .then(instance => {
                return instance.createPage();
            })
            .then(page => {
                page.setting('userAgent', "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36");
                page.property('viewportSize', {width: 1920, height: 1017});
                resolve(page);
            })
            .catch(error => {
                reject(error);
            });
    });
}
function render (page, name) {
    page.render('/home/ubuntu/workspace/Images/' + name);
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve();
        }, 5000);  
    });
}
function login (page, name, pass, world) {
    return page.open('https://en.tribalwars2.com/#/')
        .then((status) => {
            return new Promise((resolve, reject) => {
                var reload;
                page.evaluate(function(name, pass) {
                    if ($('.input.user input') != null) {
                        $('.input.user input').val(name);
                        $('.input.pw input').val(pass);
                        $("#autologin").attr('checked', true);
                        $('.button-login').click();
                    }
                }, name, pass)
                .then(() => {
                    return new Promise((resolve, reject) => {
                        var enterTheWorld = setInterval(function() {
                            page.evaluate(function(world) {
                                if ($('.btn-orange:contains("' + world + '")').length !== 0) {
                                    $('.btn-orange:contains("' + world + '")')[0].click();
                                    return true;
                                } else {
                                    $('.button-login').click();
                                    return false;
                                }
                            }, world)
                            .then(res => {
                                if(res === true) {
                                    clearInterval(enterTheWorld);
                                    resolve(); 
                                }
                            });
                        },1000);
                    });
                })
                .then(() => {
                    reload = setInterval(()=>{
                        page.reload();
                    }, 30000);
                    return new Promise((resolve, reject) => {
                        var loading = setInterval(function() {
                            page.evaluate(function() {
                                return $('#screen-loading').html() === '';
                            })
                            .then(res => {
                                if(res === true) {
                                    clearInterval(loading);
                                    clearInterval(reload);
                                    resolve();
                                }
                            });
                        }, 1000);
                    });
                })
                .then(()=> {
                    return page.evaluate(function() {
                        if($('a[ng-click="claimReward()"]')) {
                           $('a[ng-click="claimReward()"]').click();
                        } 
                    });
                })
                .then(() => {
                    return page.evaluate(function() {
                        if (document.getElementsByClassName("win-head")[0]) {
                            $('.win-head .btn-red').click();
                            $('.win-foot .btn-green').click();
                        }
                    });
                })
                .then(() => {
                    console.log('Login - Done');
                    setTimeout(() => {
                        pageState = "loaded";
                        resolve();
                    },1000);
                });
            });
        });
}
function openHeadquarters () {
    return new Promise(resolve => {
        page.sendEvent('keypress', 'h')
        .then(()=>{
            var loading = setInterval(function(){
                page.evaluate(function(){
                    var res = 0;
                    for (var i = 0; i < 16; i++) {
                        res += $('.building-level-head:eq(' + i + ') .ng-binding:eq(0)').length;
                    }
                    return res === 16;
                })
                .then(res => {
                    if(res === true){
                        clearInterval(loading);
                        pageState = "headquarters";
                        resolve();
                    }
                });
            }, 100);
        });
    });
}
/*function openQuests (page) { 
    return new Promise(resolve => {
        var loading = setInterval(function(){
            page.evaluate(function() {
                if ($('.rewards .text').length !== 0) {
                    return true;
                } else {
                    $('li[ng-click="openQuestLineModal(questLineModel);"]').click();
                    return false;
                }
            })
            .then(res => {
                if(res === true){
                    clearInterval(loading);
                    setTimeout(() => {
                        resolve();
                    }, 200);
                } 
            });
        },300);
        setTimeout(() => {
            clearInterval(loading);
            resolve();
        }, 2000);
    });
}*/
function getQuestRewards(){
	return new Promise((resolve) => {
	    console.log("get");
		var questRewards = [];
		var firstLevelResolve;
		var firstLevelPromise = new Promise((resolve1) => {
			firstLevelResolve = resolve1;
		})
		.then(() => {
			return page.evaluate(function() {
			    return $('li[ng-click="openQuestLineModal(questLineModel);"]').length;
			})
			
		})
		.then((n) => {
			var secondLevelResolve;
			var secondLevelPromise = new Promise((resolve2) => {
				secondLevelResolve = resolve2;
			})
			var realI = 0;
			for (var i = 0; i < n; i++) {
				 
				secondLevelPromise = secondLevelPromise
				.then(() => {
				    console.log(realI);
					return page.evaluate(function(i){
							$('li[ng-click="openQuestLineModal(questLineModel);"]')[i].click();
					}, realI++)
				})
				.then(()=>{
				    console.log("resolveCheckSubquest");
					return new Promise((resolveCheckSubquest) => {
						var loading = setInterval(()=>{
							page.evaluate(function(){
								var check = {}
								check.name = $('h3[class="ng-binding"]').html();
								check.quantity = $('table[ng-click="selectQuest($index);"]').length; 
								return check;
							})
							.then((check)=>{
								if(questNameToNumber[check.name] === check.quantity){
									clearInterval(loading);
									resolveCheckSubquest(check);
								}
							})
						},500)
					})
				})
				.then((check) => {
				    console.log("thirdLevelPromise begin " + check.name + check.quantity);
					var thirdLevelResolve;
					var thirdLevelPromise = new Promise((resolve3)=>{
						thirdLevelResolve = resolve3;
					});
					var realJ = 0;
					for(var j = 0; j<check.quantity; j++){
						thirdLevelPromise = thirdLevelPromise
						.then(()=>{
		                    console.log(realJ);
							return page.evaluate(function(j){
								$('table[ng-click="selectQuest($index);"]')[j].click();
							}, realJ++);
						})
						.then(()=>{
							return new Promise((resolveLoadedSubquest)=>{
								setTimeout(()=>{
									resolveLoadedSubquest();
								},100)
							})
						})
						.then(()=>{
							return page.evaluate(function(j){
								return  $('a[ng-click="finishQuest();"]').attr('class')[0] === "btn-border btn-orange ng-binding btn-green" 
							},j)
						})
						.then((rewardsPresence)=>{
							if(rewardsPresence){
								return page.evaluate(function(){
									var questReward = {strings: []}
									for(var reward in $('.rewards .text')){
										questReward.strings.push(reward.html());
									}
									return questReward;
								})
								.then((questReward) => {
									questReward["questName"] = check.name;
									questReward["subQuestNumber"] = j;
									questRewards.push(questReward);
								})
								
							}
							
						})
					}
					return new Promise((resolveq) => {
						resolveq(thirdLevelPromise);
						console.log("thirdLevelResolve");
						thirdLevelResolve();
					})
					
				})
				.then(()=>{
					return page.evaluate(function(){
						$('[ng-controller="ModalQuestLineController"] [ng-click="closeWindow()"]').click();
					})
				})
				
			}
			
			
			return new Promise((resolveq) => {
				resolveq(secondLevelPromise);
				secondLevelResolve();
			})
			
		})
		.then(() => {
			resolve(questRewards);
		})
		
		queue = queue.then(() => {
			return firstLevelPromise;
		})
		firstLevelResolve();
	})
}


function openBarracks () {
    return new Promise(resolve => {
        page.sendEvent('keypress', 'b')
        .then(()=>{
            var loading = setInterval(function(){
                page.evaluate(function(){
                    return $('.directive-researches')[0] !== undefined;
                })
                .then(res => {
                    if(res === true){
                        clearInterval(loading);
                        pageState = "barracks";
                        resolve();
                    }
                });
            }, 100);
        });
    });
}
function openInventory (page) {
    return new Promise(resolve => {
        page.sendEvent('keypress', 'i')
        .then(()=>{
            var loading = setInterval(function(){
                page.evaluate(function(){
                    return $('.offer-container.ng-scope').length !== 0;
                })
                .then(res => {
                    if(res === true){
                        clearInterval(loading);
                        resolve();
                    }
                });
            }, 100);
        });
    });
}
exports.getInformation = function () {
    return new Promise(resolve => {
        console.log("get info")
        if(pageState !== "headquarters"){
            queue = queue.then(()=>{
                return openHeadquarters();
            })
        }
        var village = {};
        queue = queue
        .then(() => {
            return page.evaluate(function(){
                var village = {};
                village.name = $('#village-name').html();
                village.resources = {};
                village.resources.wood = +$('.resource-text:eq(0)').html().replace(',','');
                village.resources.clay = +$('.resource-text:eq(1)').html().replace(',','');
                village.resources.iron = +$('.resource-text:eq(2)').html().replace(',','');
                village.provisions = +$('.resource-text:eq(3)').html().replace(',','');
                var building = 
                [   
                    'headquarters',
                    'timberCamp',
                    'clayPit',
                    'ironMine',
                    'farm',
                    'warehouse',
                    'chapel', //В классе не реализована
                    'rallyPoint',
                    'barracks',
                    'statue',
                    'hospital',
                    'wall',
                    'market',
                    'tavern',
                    'academy',
                    'hallOfOrders'
                ];
                var i = 0;
                for(i = 0; i < building.length; i++){
                    village[building[i]] = +$('.building-level-head:eq('+i+') .ng-binding:eq(0)').html();
                }
                var unit =
                [
                    'spearman',
                    'swordsman',
                    'axeFighter',
                    'archer',
                    'lightCavalry',
                    'mountedArcher',
                    'heavyCavalry',
                    'ram',
                    'catapult'
                ];
                for(i = 0; i < unit.length; i++){
                    village[unit[i]] = +$('.amount:eq('+i+')').html(); //Может быть запятая в числе, может и не быть
                }
                return village;
            })
        })
        .then(res => {
            village = res;
            return openInventory(page);
        })
        .then(() => {
            return page.evaluate(function(){
                var find = $('.offer-container:contains("500") .item-amount').html();        
                if (find.length === 0) {
                   return 0;
                } else {
                    return +find.match(/\d+/)[0];
                }
            });
        })
        .then(res => {
            village.smallRewardQuantity = res;
            return openHeadquarters(page);
        })
        .then(() => {
            return getQuestRewards();
        })
        .then((questRewards) => {
            village.questRewards = questRewards;
            resolve(village);
        });
    });
};
exports.upgrade = function (name) {
    console.log('upgrade: ' + name  + ' | ' + Date.now());
    if(pageState !== "headquarters"){
        queue = queue.then(()=>{
            return openHeadquarters();
        })
     }
    queue = queue.then(() => {
        return new Promise(resolve => {
            var loading = setInterval(() => {
                page.evaluate(function(name) {
                    if (document.querySelector('.building-container.building-' + name + ' .size-44x44.btn-upgrade.btn-orange.btn-grey') === null) {
                        document.querySelector('.building-container.building-' + name + ' .size-44x44.btn-upgrade.btn-orange').click();
                        return true;
                    } else {
                        return false;
                    }
                }, name)
                .then(res => {
                    if(res === true){
                        clearInterval(loading);
                        resolve();
                    } 
                });
            }, 100);
        });
    });
    
}
exports.cancelUpgrade = function (num) {
    console.log('cancel upgrade: ' + num + " | " + Date.now());
    if(pageState !== "headquarters"){
        queue = queue.then(()=>{
            return openHeadquarters();
        })
     }
    queue = queue.then(() => {
        return new Promise(resolve => {
            var loading = setInterval(() => {
                page.evaluate(function(num) {
                    if ($('.btn-border.ng-binding.btn-red').length === 0) {
                        $(".building-headquarter.twx-window.screen.left").find(".btn-red.size-34x34.icon-26x26-close:eq(" + num + ")").click()
                        return false; 
                    } else {
                        $('.btn-border.ng-binding.btn-red').click();
                        return true;
                    }
                }, num)
                .then(res => {
                    if(res === true){
                        clearInterval(loading);
                        resolve();
                    } 
                });
            }, 100);
            setTimeout(() => {
                clearInterval(loading);
                resolve();
            }, 2000);
        });
    });
}
exports.recruit = function (unit, count) {
    console.log('recruit: ' + unit + ' ' + count);
    if(pageState !== "barracks"){
        queue = queue.then(() => {
            return openBarracks();
        })
     }
    queue = queue.then(() => {
        return page.evaluate(function(unit, count){
            $('.unit-box label:eq(' + unit + ')').trigger('mousedown');
            $('.unit-box label:eq(' + unit + ') input').val(count);
            $('.unit-box label:eq(' + unit + ') input').trigger("change");
            $('.unit-box label:eq(' + unit + ') input').trigger("keyup");
            $('a[ng-click="recruitUnits($event)"]').click();
        }, unit, count);
    });

}
exports.cancelRecruit = function (num) {
    console.log('cancel recruit: ' + num);
    if(pageState !== "barracks") {
        queue = queue.then(() => {
            return openBarracks();
        })
     }
    queue = queue.then(() => {
        return new Promise(resolve => {
            var loading = setInterval(() => {
                page.evaluate(function(num) {
                    if ($('.btn-border.ng-binding.btn-red').length === 0) {
                        $(".building-barracks.twx-window.screen.left").find(".btn-red.size-34x34.icon-26x26-close:eq(" + num + ")").click()
                        return false;
                    } else {
                        $('.btn-border.ng-binding.btn-red').click();
                        return true;
                    }
                }, num)
                .then(res => {
                    if(res === true){
                        clearInterval(loading);
                        resolve();
                    } 
                });
            }, 100);
            setTimeout(() => {
                clearInterval(loading);
                resolve();
            }, 2000);
        });
    });
    
}
exports.attack = function (target) {
    console.log('attack: ' + target.x + ' ' + target.y);
    queue = queue
    .then(() => {
        //Перешли на точку на карте
        return page.evaluate(function(x,y){
            $($('input[ng-model="coordinates.x"]')[0]).val(x.toString())
            $($('input[ng-model="coordinates.y"]')[0]).val(y.toString()); 
            $($('input[ng-model="coordinates.x"]')[0]).trigger("input"); 
            $($('input[ng-model="coordinates.y"]')[0]).trigger("input"); 
            $($('div[ng-click="jumpTo(coordinates)"]')[0]).click();
        }, target.x, target.y);
    })
    .then(() => {
        //Открыли субменю Send Army
        return new Promise(resolve => {
            var loading = setInterval(() => {
                page.evaluate(function() {
                    if ($('[ng-click="openSubMenu(menuName)"][tooltip-content="Send Army"]').length === 1) {
                        $('[ng-click="openSubMenu(menuName)"][tooltip-content="Send Army"]').click();
                        return true;
                    } else {
                        return false;
                    }
                })
                .then(res => {
                    if(res === true){
                        clearInterval(loading);
                        resolve();
                    } 
                });
            }, 300);
            setTimeout(() => {
                clearInterval(loading);
                resolve();
            }, 2000);
        });
    })
    .then(() => {
        //Указали количество в����йск и нажали "атака"
        return page.evaluate(function(target) {
            $('.unit-box:contains("Spearman") input[ng-model="sliders[name].value"]').val(target.spearman);
            $('.unit-box:contains("Spearman") input[ng-model="sliders[name].value"]').trigger('input');
            $('a[ng-click="sendArmy(\'attack\')"]').click();
        }, target);
    });
};
exports.init = function () {
    queue = openPage()
    .then(createdPage => {
        page = createdPage ;
        return login(page, 'eruihnerlreknre', 'Olv8Ns3zpKHgq', 'Rumeli Hisari');
    })
   .then()
    
    /*
    queue = openPage()
    .then(page => {
        page = page;
        return login(page, 'eruihnerlreknre', 'Olv8Ns3zpKHgq', 'Rumeli Hisari');
    })
    .then(() => {
        return openBarracks(page);
    });
    */
    
    setInterval(() => {
        var page;
        const name = "PavelLev";
        const pass = "Tlotria7";
        openPage()
            .then(openedPage => {
                page = openedPage;
                return page.open("https://ide.c9.io/pavellev/test1");
        	})
        	.then(status => {
        		return page.evaluate(function (name, pass) {
        			if (document.getElementById("signin_window") !== null) {
        				$("#inpUsernameEmail").val(name);
        				$("#inpPassword").val(pass);
        				$("#cbRememberLogin").click();
        				$("#btnSignIn").click();
        			}
        		}, name, pass);
        	})
        	.then(() => {
        	    setTimeout(() => {
            		page.sendEvent("click", 457, 1006);
            		page.close();
        	    }, 30000);
        	});
    }, 500000);
};

exports.renderHeadquaters = function(fileName) {
    queue = queue.then(() => {
        return new Promise((resolve) => {
            setTimeout(() => {
                page.render(fileName);
                console.log("rendered at " + fileName);
                setTimeout(() => {
                    resolve();
                }, 1000);
            }, 1000);
        });
    });
};